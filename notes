<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@yield('title', 'Admin Dashboard')</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="icon" href="{{ asset('images/logo.png') }}">
    <style>
        #map-container {
            height: 300px;
            width: 100%;
            border-radius: 0.5rem;
            margin-top: 1rem;
            border: 1px solid #e2e8f0;
        }
        .pac-container {
            z-index: 1050 !important;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
<div class="flex min-h-screen">

    @include('layouts.sidebar')

    <main class="flex-1 p-6 space-y-8">
        <!-- Stat Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="bg-white rounded-xl shadow p-6">
                <h3 class="text-gray-600 text-sm">Total Revenue</h3>
                <p class="text-2xl font-bold text-green-600">$34,245</p>
                <p class="text-xs text-gray-400">Not bad</p>
            </div>
            <div class="bg-white rounded-xl shadow p-6">
                <h3 class="text-gray-600 text-sm">Fixed Issues</h3>
                <p class="text-2xl font-bold text-red-600">75</p>
                <p class="text-xs text-gray-400">Tracked from GitHub</p>
            </div>
            <div class="bg-white rounded-xl shadow p-6">
                <h3 class="text-gray-600 text-sm">Available Drivers</h3>
                <p class="text-2xl font-bold text-blue-400">+245</p>
                <p class="text-xs text-gray-400">Just Updated</p>
            </div>
        </div>

        <main class="flex-1 p-6 space-y-8">
            @yield('content')
        </main>
    </main>
</div>

<!-- Google Maps API -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCg0hy8YfWY7LzfDyId8dd1e3FplF3msAY&libraries=places&callback=initMap" async defer></script>

<script>
    let map;
    let marker;
    let autocomplete;

    function initMap() {
        // Initialize map centered on Lebanon
        map = new google.maps.Map(document.getElementById('map-container'), {
            center: { lat: 33.8938, lng: 35.5018 },
            zoom: 12,
            mapTypeControl: false,
            streetViewControl: false
        });

        // Initialize autocomplete
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('address-search'),
            { types: ['geocode'], fields: ['address_components', 'geometry'] }
        );

        // Add click listener for map
        map.addListener('click', (e) => {
            placeMarker(e.latLng);
            reverseGeocode(e.latLng);
        });

        // Handle address selection
        autocomplete.addListener('place_changed', () => {
            const place = autocomplete.getPlace();
            if (!place.geometry) {
                alert("No details available for this address");
                return;
            }

            placeMarker(place.geometry.location);
            fillAddressComponents(place);
            map.panTo(place.geometry.location);
            map.setZoom(15);
        });
    }

    function placeMarker(location) {
        if (marker) marker.setMap(null);
        marker = new google.maps.Marker({
            position: location,
            map: map,
            draggable: true
        });

        marker.addListener('dragend', () => {
            reverseGeocode(marker.getPosition());
        });
    }

    function reverseGeocode(latLng) {
        new google.maps.Geocoder().geocode({ location: latLng }, (results, status) => {
            if (status === "OK" && results[0]) {
                document.getElementById('address-search').value = results[0].formatted_address;
                fillAddressComponents(results[0]);
            }
        });
    }

    function fillAddressComponents(place) {
        const components = {
            street: '',
            city: '',
            state: '',
            postal_code: '',
            country: 'Lebanon'
        };

        place.address_components.forEach(component => {
            const type = component.types[0];
            if (type === "route") components.street = component.long_name;
            if (type === "locality") components.city = component.long_name;
            if (type === "administrative_area_level_1") components.state = component.short_name;
            if (type === "postal_code") components.postal_code = component.long_name;
            if (type === "country") components.country = component.long_name;
        });

        // Update form fields
        Object.keys(components).forEach(key => {
            const field = document.getElementById(key);
            if (field) field.value = components[key];
        });

        // Update coordinates
        document.getElementById('latitude').value = place.geometry.location.lat();
        document.getElementById('longitude').value = place.geometry.location.lng();
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Prevent form submission when hitting enter in address search
        const addressSearch = document.getElementById('address-search');
        if (addressSearch) {
            addressSearch.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') e.preventDefault();
            });
        }
    });
</script>
</body>
</html>
